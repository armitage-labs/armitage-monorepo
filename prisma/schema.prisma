generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("FRONTEND_DATABASE_URL")
}

model User {
  id              String           @id @default(uuid())
  username        String           @db.VarChar(255)
  email           String           @unique
  created_at      DateTime         @default(now()) @db.Timestamp(6)
  Team            Team[]
  ProductTourView ProductTourView?
  UserOnboarding  UserOnboarding[]
}

model GithubRepo {
  id        String @id @default(uuid())
  team_id   String
  Team      Team   @relation(fields: [team_id], references: [id], onDelete: Cascade)
  name      String
  full_name String

  @@unique([team_id, full_name])
}

model Team {
  id                      String                    @id @default(uuid())
  owner_user_id           String
  owner                   User                      @relation(fields: [owner_user_id], references: [id], onDelete: Cascade)
  name                    String                    @db.VarChar(255)
  GithubRepo              GithubRepo[]
  ContributionCalculation ContributionCalculation[]
  created_at              DateTime                  @default(now()) @db.Timestamp(6)
  ContributionRequest     ContributionRequest[]
}

model ContributionCalculation {
  id             String      @id @default(uuid())
  team_id        String
  score_interval Json?
  Team           Team        @relation(fields: [team_id], references: [id], onDelete: Cascade)
  UserScore      UserScore[]
  created_at     DateTime    @default(now()) @db.Timestamp(6)
}

model ContributionRequest {
  id           String   @id @default(uuid())
  team_id      String
  email        String   @db.VarChar(1000)
  Team         Team     @relation(fields: [team_id], references: [id], onDelete: Cascade)
  created_at   DateTime @default(now()) @db.Timestamp(6)
  access_token String
}

model CalculationSemaphore {
  id        String  @id @default(uuid())
  available Boolean
}

model ProductTourView {
  id      String @id @default(uuid())
  user_id String @unique
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model UserScore {
  id                          String                  @id @default(uuid())
  contribution_calculation_id String
  contribution_calculation    ContributionCalculation @relation(fields: [contribution_calculation_id], references: [id], onDelete: Cascade)
  username                    String                  @db.VarChar(255)
  user_type                   String                  @db.VarChar(255)
  score                       String                  @db.VarChar(255)
  score_interval              Json?
  created_at                  DateTime                @default(now()) @db.Timestamp(6)
}

model Event {
  id         String   @id @default(uuid())
  user_id    String
  event_name String   @db.VarChar(1000)
  event_data Json?
  created_at DateTime @default(now()) @db.Timestamp(6)
}

model UserOnboarding {
  id         String   @id @default(uuid())
  flow       String   @db.VarChar(255)
  flow_step  String   @db.VarChar(255)
  user_id    String
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  created_at DateTime @default(now()) @db.Timestamp(6)
}
